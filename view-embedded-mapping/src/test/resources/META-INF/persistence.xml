<persistence xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             version="2.1"
             xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">


    <persistence-unit name="org.hibernate.tutorial.jpa" transaction-type="RESOURCE_LOCAL">
        <description>
            Persistence unit for the JPA tutorial of the Hibernate Getting Started Guide
        </description>
<!--         <provider>org.hibernate.jpa.HibernatePersistenceProvider</provider> -->
        <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>

        <class>org.zk.view.TestEntityAggregate</class>
        <class>org.zk.view.TestEntity</class>

        <properties>
			<!-- PostgreSQL configuration -->
            <property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:postgresql:test"/>
            <property name="javax.persistence.jdbc.user" value="nonadmin"/>
            <property name="javax.persistence.jdbc.password" value="nonadmin"/>
            
            <!-- H2Database configuration -->
           <!--  <property name="javax.persistence.jdbc.driver" value="org.h2.Driver"/>
            <property name="javax.persistence.jdbc.url" value="jdbc:h2:~/test;MODE=PostgreSQL"/>
            <property name="javax.persistence.jdbc.user" value="sa"/>
            <property name="javax.persistence.jdbc.password" value=""/> -->
            
            <!-- force JPA providers to use PostgreSQL syntax even for H2 databese -->
            <property name="eclipselink.target-database" value="org.eclipse.persistence.platform.database.PostgreSQLPlatform"/>
            <property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQL9Dialect"/>

			<!-- turn on verbose logging on both providers -->
            <property name="hibernate.show_sql" value="true"/>
			<property name="eclipselink.logging.level" value="FINE"/>
<!--             <property name="hibernate.hbm2ddl.auto" value="validate"/> -->
            <!--

            Use a new Hibernate 3.2.3+ generators

            In Hibernate 4.x, if new_generator_mappings is true:

            @GeneratedValue(AUTO) maps to org.hibernate.id.enhanced.SequenceStyleGenerator
            @GeneratedValue(TABLE) maps to org.hibernate.id.enhanced.TableGenerator
            @GeneratedValue(SEQUENCE) maps to org.hibernate.id.enhanced.SequenceStyleGenerator

            In Hibernate 4.x, if new_generator_mappings is false:

            @GeneratedValue(AUTO) maps to Hibernate "native"
            @GeneratedValue(TABLE) maps to org.hibernate.id.MultipleHiLoPerTableGenerator
            @GeneratedValue(SEQUENCE) to Hibernate "seqhilo"

             -->
            <property name="hibernate.id.new_generator_mappings" value="true"/>
            <property name="javax.persistence.schema-generation.create-script-source" value="META-INF/db/createDbInput.sql"/>
            <property name="javax.persistence.schema-generation.drop-script-source" value="META-INF/db/dropDbInput.sql"/>
            <property name="javax.persistence.schema-generation.create-source" value="script"/>
            <property name="javax.persistence.schema-generation.drop-source" value="script"/>
            <property name="javax.persistence.schema-generation.database.action" value="drop-and-create"/>
            <property name="javax.persistence.schema-generation.create-database-schemas" value="false"/>
            <property name="javax.persistence.sql-load-script-source" value="META-INF/db/dataInput.sql"/>
        </properties>
    </persistence-unit>

</persistence>
